/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ua.com.codefire;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;

/**
 *
 * @author homefulloflove
 */
public class DownloadJFrame extends javax.swing.JFrame implements DownloadFileListener {

    /**
     * Creates new form DownloadJFrame
     */
    private static final String SETTINGS_FILE_NAME = "settings.properties";

    private DefaultListModel musicList;
    private File storage;
    private int readBytes;
    private int progress;
    private int totalBytes;
    private List<Long> songsBytes;
    private Properties props = new Properties();

    public DownloadJFrame() {
        initComponents();

        loadSettings();

        storage = new File(props.getProperty("lastStore", System.getProperty("user.home")));

        jtfLocation.setText(storage.getAbsolutePath());

        this.musicList = new DefaultListModel();

        jlDownloadInfo.setModel(musicList);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfSourceURL = new javax.swing.JTextField();
        jbStartDowload = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlDownloadInfo = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jbRetrieveList = new javax.swing.JButton();
        jtfLocation = new javax.swing.JTextField();
        jbBrowse = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jsThreads = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jpbBar = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jlStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jtfSourceURL.setText("http://www.ex.ua/playlist/14324270.m3u");

        jbStartDowload.setText("DOWNLOAD");
        jbStartDowload.setEnabled(false);
        jbStartDowload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStartDowloadActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jlDownloadInfo);

        jLabel1.setText("Download Playlist:");

        jbRetrieveList.setText("Retrieve list");
        jbRetrieveList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRetrieveListActionPerformed(evt);
            }
        });

        jtfLocation.setEditable(false);
        jtfLocation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtfLocationMouseClicked(evt);
            }
        });

        jbBrowse.setText("Browse...");
        jbBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBrowseActionPerformed(evt);
            }
        });

        jLabel2.setText("Storage:");

        jLabel3.setText("Threads:");

        jsThreads.setModel(new javax.swing.SpinnerNumberModel(3, 1, 10, 1));

        jLabel4.setText("Progress:");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jlStatus.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlStatus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlStatus)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 625, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jsThreads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbStartDowload))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfLocation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbBrowse))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfSourceURL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbRetrieveList))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jpbBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfSourceURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jbRetrieveList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jpbBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbBrowse)
                    .addComponent(jtfLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbStartDowload)
                    .addComponent(jLabel3)
                    .addComponent(jsThreads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbStartDowloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStartDowloadActionPerformed

        jpbBar.setMaximum(files.size());

        toggleState(false);

        int songsInAction = (int) jsThreads.getModel().getValue();
        ExecutorService threadPool = Executors.newFixedThreadPool(songsInAction);
        jpbBar.setStringPainted(true);

        for (DownloadFile file : files) {

            FileDownloader fd = new FileDownloader(storage, file, this);
            threadPool.execute(fd);

        }

        threadPool.shutdown();
    }//GEN-LAST:event_jbStartDowloadActionPerformed

    private void toggleState(boolean state) {
        jbRetrieveList.setEnabled(state);
        jtfLocation.setEnabled(state);
        jtfSourceURL.setEnabled(state);
        jbBrowse.setEnabled(state);
        jsThreads.setEnabled(state);
    }

    private void jbRetrieveListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRetrieveListActionPerformed

        files = new ArrayList<>();
        try (Scanner scan = new Scanner(new URL(jtfSourceURL.getText()).openStream())) {
            while (scan.hasNextLine()) {
                String address = scan.nextLine();
                DownloadFile first = new DownloadFile(new URL(address));
                files.add(first);
            }
        } catch (MalformedURLException ex) {
            Logger.getLogger(DownloadJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DownloadJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        refreshList();

        jbStartDowload.setEnabled(!files.isEmpty());

    }//GEN-LAST:event_jbRetrieveListActionPerformed

    private void jbBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBrowseActionPerformed

        selectDownloadLocation();

    }//GEN-LAST:event_jbBrowseActionPerformed

    private void jtfLocationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtfLocationMouseClicked

        if (jbBrowse.isEnabled()) {
            selectDownloadLocation();
        }

    }//GEN-LAST:event_jtfLocationMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        props.setProperty("lastStore", storage.getAbsolutePath());

        storeSettings();

    }//GEN-LAST:event_formWindowClosing

    private List<DownloadFile> files;

    private void refreshList() {

        musicList.clear();

        for (DownloadFile file : files) {
            musicList.addElement(file);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DownloadJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbBrowse;
    private javax.swing.JButton jbRetrieveList;
    private javax.swing.JButton jbStartDowload;
    private javax.swing.JList<String> jlDownloadInfo;
    private javax.swing.JLabel jlStatus;
    private javax.swing.JProgressBar jpbBar;
    private javax.swing.JSpinner jsThreads;
    private javax.swing.JTextField jtfLocation;
    private javax.swing.JTextField jtfSourceURL;
    // End of variables declaration//GEN-END:variables

    private void selectDownloadLocation() {

        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(storage);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            storage = selectedFile;
            jtfLocation.setText(storage.getAbsolutePath());
        }

    }

    private void loadSettings() {
        try (FileInputStream fis = new FileInputStream(SETTINGS_FILE_NAME)) {
            props.load(fis);
        } catch (IOException ex) {
            Logger.getLogger(DownloadJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void storeSettings() {
        try (FileOutputStream fos = new FileOutputStream(SETTINGS_FILE_NAME)) {
            props.store(fos, null);
        } catch (IOException ex) {
            Logger.getLogger(DownloadJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void dowloadComplete() {
        jpbBar.setValue(0);
        jlStatus.setText("All files downloaded");
        toggleState(true);

    }

    @Override
    public void stateChanged(DownloadFile downloadFile) {
        switch (downloadFile.getState()) {
            case PROGRESS:

                break;
            case COMPLETE:
                jpbBar.setValue(jpbBar.getValue() + 1);

                if (jpbBar.getValue() == jpbBar.getMaximum()) {
                    dowloadComplete();

                }

                break;
        }

//        refreshList();
        jlDownloadInfo.repaint();

    }
}
